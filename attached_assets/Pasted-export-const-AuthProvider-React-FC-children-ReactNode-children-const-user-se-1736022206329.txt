export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [logoutMessage, setLogoutMessage] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false); // Add this line
  const router = useRouter();

  // Separate useEffect for initialization
  useEffect(() => {
    const initializeAuth = () => {
      const token = localStorage.getItem('token');
      if (token) {
        const userData = decodeToken(token);
        if (userData) {
          setUser(userData);
          setIsAuthenticated(true);
        } else {
          // Invalid token
          localStorage.removeItem('token');
          localStorage.removeItem('userId');
        }
      }
      setIsInitialized(true);
    };

    initializeAuth();
  }, []);

  // Add token refresh/validation logic
  useEffect(() => {
    if (!isAuthenticated || !user) return;

    const validateToken = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        logout();
        return;
      }

      try {
        // Simple token validation by checking expiration
        const tokenData = decodeToken(token);
        if (!tokenData) {
          logout();
        }
      } catch (error) {
        console.error('Token validation error:', error);
        logout();
      }
    };

    validateToken();

    // Optional: Set up periodic token validation
    const interval = setInterval(validateToken, 5 * 60 * 1000); // Every 5 minutes

    return () => clearInterval(interval);
  }, [isAuthenticated, user]);

  const login = async (email: string, password: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/users/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Login failed');
      }

      if (data.token && data.userId) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('userId', data.userId);
        
        // Decode and set user data from token
        const userData = decodeToken(data.token);
        if (userData) {
          setUser(userData);
          setIsAuthenticated(true);
          return true;
        }
      }
      return false;
    } catch (error) {
      console.error('Login error:', error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('An unexpected error occurred');
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userId');
    setUser(null);
    setIsAuthenticated(false);
    setLogoutMessage("You have been successfully logged out.");
    router.push('/');
  };

  // Don't render children until auth is initialized
  if (!isInitialized) {
    return null; // Or a loading spinner
  }

  return (
    <AuthContext.Provider value={{ 
      user, 
      isAuthenticated, 
      login, 
      logout, 
      logoutMessage, 
      clearLogoutMessage,
      changePassword,
      requestPasswordReset,
      resetPassword
    }}>
      {children}
    </AuthContext.Provider>
  );
};